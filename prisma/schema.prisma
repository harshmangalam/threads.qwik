generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  USER
  ADMIN
}

enum StatusType {
  ONLINE
  OFFLINE
  IDLE
}

enum ReplyPrivacyType {
  ANYONE
  FOLLOWING
  MENTION
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String
  username      String         @unique @db.VarChar(39)
  status        StatusType     @default(ONLINE)
  bio           String         @default("") @db.VarChar(255)
  role          RoleType       @default(USER)
  private       Boolean        @default(false)
  link          String?
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  repostThreads Reposts[]      @relation(name: "usersThreadsReposts")
  savedThreads  SavedThreads[] @relation(name: "usersThreadsSave")
  followedBy    Follows[]      @relation("followedBy")
  following     Follows[]      @relation("following")
  likedThreads  LikedThreads[] @relation(name: "usersThreadsLikes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id             String           @id @default(cuid())
  text           String?          @db.VarChar(500)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  replyPrivacy   ReplyPrivacyType @default(ANYONE)
  savedByUsers   SavedThreads[]   @relation(name: "savedThreads")
  likes          LikedThreads[]   @relation(name: "threadsLikes")
  reposts        Reposts[]        @relation(name: "repostThreads")
  parentThreadId String?
  parentThread   Thread?          @relation("ThreadReplies", fields: [parentThreadId], references: [id])
  replies        Thread[]         @relation("ThreadReplies")
  isReply        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Follows {
  followedBy   User     @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User     @relation("following", fields: [followingId], references: [id])
  followingId  String
  followedAt   DateTime @default(now())

  @@id([followingId, followedById])
  @@unique([followedById, followingId])
}

model SavedThreads {
  user     User     @relation(name: "usersThreadsSave", fields: [userId], references: [id])
  userId   String
  thread   Thread   @relation(name: "savedThreads", fields: [threadId], references: [id])
  threadId String
  savedAt  DateTime @default(now())

  @@id([userId, threadId])
  @@unique([userId, threadId])
}

model Reposts {
  user       User     @relation(name: "usersThreadsReposts", fields: [userId], references: [id])
  userId     String
  thread     Thread   @relation(name: "repostThreads", fields: [threadId], references: [id])
  threadId   String
  repostedAt DateTime @default(now())

  @@id([userId, threadId])
  @@unique([userId, threadId])
}

model LikedThreads {
  user     User     @relation(name: "usersThreadsLikes", fields: [userId], references: [id])
  userId   String
  thread   Thread   @relation(name: "threadsLikes", fields: [threadId], references: [id])
  threadId String
  likedAt  DateTime @default(now())

  @@id([userId, threadId])
  @@unique([userId, threadId])
}
